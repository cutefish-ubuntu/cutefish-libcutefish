/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p accounts_interface /root/Downloads/cutefish/libcutefish/accounts/org.freedesktop.Accounts.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ACCOUNTS_INTERFACE_H
#define ACCOUNTS_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.Accounts
 */
class OrgFreedesktopAccountsInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.Accounts"; }

public:
    OrgFreedesktopAccountsInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopAccountsInterface();

    Q_PROPERTY(QString DaemonVersion READ daemonVersion)
    inline QString daemonVersion() const
    { return qvariant_cast< QString >(property("DaemonVersion")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> CacheUser(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("CacheUser"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateUser(const QString &name, const QString &fullname, int accountType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(fullname) << QVariant::fromValue(accountType);
        return asyncCallWithArgumentList(QStringLiteral("CreateUser"), argumentList);
    }

    inline QDBusPendingReply<> DeleteUser(qlonglong id, bool removeFiles)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(removeFiles);
        return asyncCallWithArgumentList(QStringLiteral("DeleteUser"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> FindUserById(qlonglong id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("FindUserById"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> FindUserByName(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("FindUserByName"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > ListCachedUsers()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ListCachedUsers"), argumentList);
    }

    inline QDBusPendingReply<> UncacheUser(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("UncacheUser"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void UserAdded(const QDBusObjectPath &user);
    void UserDeleted(const QDBusObjectPath &user);
};

namespace org {
  namespace freedesktop {
    typedef ::OrgFreedesktopAccountsInterface Accounts;
  }
}
#endif
