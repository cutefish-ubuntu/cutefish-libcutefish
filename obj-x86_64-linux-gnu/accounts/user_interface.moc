/****************************************************************************
** Meta object code from reading C++ file 'user_interface.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include "user_interface.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'user_interface.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_OrgFreedesktopAccountsUserInterface_t {
    QByteArrayData data[52];
    char stringdata0[563];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_OrgFreedesktopAccountsUserInterface_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_OrgFreedesktopAccountsUserInterface_t qt_meta_stringdata_OrgFreedesktopAccountsUserInterface = {
    {
QT_MOC_LITERAL(0, 0, 35), // "OrgFreedesktopAccountsUserInt..."
QT_MOC_LITERAL(1, 36, 7), // "Changed"
QT_MOC_LITERAL(2, 44, 0), // ""
QT_MOC_LITERAL(3, 45, 14), // "SetAccountType"
QT_MOC_LITERAL(4, 60, 19), // "QDBusPendingReply<>"
QT_MOC_LITERAL(5, 80, 11), // "accountType"
QT_MOC_LITERAL(6, 92, 17), // "SetAutomaticLogin"
QT_MOC_LITERAL(7, 110, 7), // "enabled"
QT_MOC_LITERAL(8, 118, 8), // "SetEmail"
QT_MOC_LITERAL(9, 127, 5), // "email"
QT_MOC_LITERAL(10, 133, 16), // "SetHomeDirectory"
QT_MOC_LITERAL(11, 150, 7), // "homedir"
QT_MOC_LITERAL(12, 158, 11), // "SetIconFile"
QT_MOC_LITERAL(13, 170, 8), // "filename"
QT_MOC_LITERAL(14, 179, 11), // "SetLanguage"
QT_MOC_LITERAL(15, 191, 8), // "language"
QT_MOC_LITERAL(16, 200, 11), // "SetLocation"
QT_MOC_LITERAL(17, 212, 8), // "location"
QT_MOC_LITERAL(18, 221, 9), // "SetLocked"
QT_MOC_LITERAL(19, 231, 6), // "locked"
QT_MOC_LITERAL(20, 238, 11), // "SetPassword"
QT_MOC_LITERAL(21, 250, 8), // "password"
QT_MOC_LITERAL(22, 259, 4), // "hint"
QT_MOC_LITERAL(23, 264, 15), // "SetPasswordHint"
QT_MOC_LITERAL(24, 280, 15), // "SetPasswordMode"
QT_MOC_LITERAL(25, 296, 4), // "mode"
QT_MOC_LITERAL(26, 301, 11), // "SetRealName"
QT_MOC_LITERAL(27, 313, 4), // "name"
QT_MOC_LITERAL(28, 318, 8), // "SetShell"
QT_MOC_LITERAL(29, 327, 5), // "shell"
QT_MOC_LITERAL(30, 333, 11), // "SetUserName"
QT_MOC_LITERAL(31, 345, 11), // "SetXSession"
QT_MOC_LITERAL(32, 357, 9), // "x_session"
QT_MOC_LITERAL(33, 367, 11), // "AccountType"
QT_MOC_LITERAL(34, 379, 14), // "AutomaticLogin"
QT_MOC_LITERAL(35, 394, 5), // "Email"
QT_MOC_LITERAL(36, 400, 13), // "HomeDirectory"
QT_MOC_LITERAL(37, 414, 8), // "IconFile"
QT_MOC_LITERAL(38, 423, 8), // "Language"
QT_MOC_LITERAL(39, 432, 12), // "LocalAccount"
QT_MOC_LITERAL(40, 445, 8), // "Location"
QT_MOC_LITERAL(41, 454, 6), // "Locked"
QT_MOC_LITERAL(42, 461, 14), // "LoginFrequency"
QT_MOC_LITERAL(43, 476, 9), // "LoginTime"
QT_MOC_LITERAL(44, 486, 12), // "PasswordHint"
QT_MOC_LITERAL(45, 499, 12), // "PasswordMode"
QT_MOC_LITERAL(46, 512, 8), // "RealName"
QT_MOC_LITERAL(47, 521, 5), // "Shell"
QT_MOC_LITERAL(48, 527, 13), // "SystemAccount"
QT_MOC_LITERAL(49, 541, 3), // "Uid"
QT_MOC_LITERAL(50, 545, 8), // "UserName"
QT_MOC_LITERAL(51, 554, 8) // "XSession"

    },
    "OrgFreedesktopAccountsUserInterface\0"
    "Changed\0\0SetAccountType\0QDBusPendingReply<>\0"
    "accountType\0SetAutomaticLogin\0enabled\0"
    "SetEmail\0email\0SetHomeDirectory\0homedir\0"
    "SetIconFile\0filename\0SetLanguage\0"
    "language\0SetLocation\0location\0SetLocked\0"
    "locked\0SetPassword\0password\0hint\0"
    "SetPasswordHint\0SetPasswordMode\0mode\0"
    "SetRealName\0name\0SetShell\0shell\0"
    "SetUserName\0SetXSession\0x_session\0"
    "AccountType\0AutomaticLogin\0Email\0"
    "HomeDirectory\0IconFile\0Language\0"
    "LocalAccount\0Location\0Locked\0"
    "LoginFrequency\0LoginTime\0PasswordHint\0"
    "PasswordMode\0RealName\0Shell\0SystemAccount\0"
    "Uid\0UserName\0XSession"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_OrgFreedesktopAccountsUserInterface[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      16,   14, // methods
      19,  142, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       1,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,   94,    2, 0x06 /* Public */,

 // slots: name, argc, parameters, tag, flags
       3,    1,   95,    2, 0x0a /* Public */,
       6,    1,   98,    2, 0x0a /* Public */,
       8,    1,  101,    2, 0x0a /* Public */,
      10,    1,  104,    2, 0x0a /* Public */,
      12,    1,  107,    2, 0x0a /* Public */,
      14,    1,  110,    2, 0x0a /* Public */,
      16,    1,  113,    2, 0x0a /* Public */,
      18,    1,  116,    2, 0x0a /* Public */,
      20,    2,  119,    2, 0x0a /* Public */,
      23,    1,  124,    2, 0x0a /* Public */,
      24,    1,  127,    2, 0x0a /* Public */,
      26,    1,  130,    2, 0x0a /* Public */,
      28,    1,  133,    2, 0x0a /* Public */,
      30,    1,  136,    2, 0x0a /* Public */,
      31,    1,  139,    2, 0x0a /* Public */,

 // signals: parameters
    QMetaType::Void,

 // slots: parameters
    0x80000000 | 4, QMetaType::Int,    5,
    0x80000000 | 4, QMetaType::Bool,    7,
    0x80000000 | 4, QMetaType::QString,    9,
    0x80000000 | 4, QMetaType::QString,   11,
    0x80000000 | 4, QMetaType::QString,   13,
    0x80000000 | 4, QMetaType::QString,   15,
    0x80000000 | 4, QMetaType::QString,   17,
    0x80000000 | 4, QMetaType::Bool,   19,
    0x80000000 | 4, QMetaType::QString, QMetaType::QString,   21,   22,
    0x80000000 | 4, QMetaType::QString,   22,
    0x80000000 | 4, QMetaType::Int,   25,
    0x80000000 | 4, QMetaType::QString,   27,
    0x80000000 | 4, QMetaType::QString,   29,
    0x80000000 | 4, QMetaType::QString,   27,
    0x80000000 | 4, QMetaType::QString,   32,

 // properties: name, type, flags
      33, QMetaType::Int, 0x00095001,
      34, QMetaType::Bool, 0x00095001,
      35, QMetaType::QString, 0x00095001,
      36, QMetaType::QString, 0x00095001,
      37, QMetaType::QString, 0x00095001,
      38, QMetaType::QString, 0x00095001,
      39, QMetaType::Bool, 0x00095001,
      40, QMetaType::QString, 0x00095001,
      41, QMetaType::Bool, 0x00095001,
      42, QMetaType::ULongLong, 0x00095001,
      43, QMetaType::LongLong, 0x00095001,
      44, QMetaType::QString, 0x00095001,
      45, QMetaType::Int, 0x00095001,
      46, QMetaType::QString, 0x00095001,
      47, QMetaType::QString, 0x00095001,
      48, QMetaType::Bool, 0x00095001,
      49, QMetaType::ULongLong, 0x00095001,
      50, QMetaType::QString, 0x00095001,
      51, QMetaType::QString, 0x00095001,

       0        // eod
};

void OrgFreedesktopAccountsUserInterface::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<OrgFreedesktopAccountsUserInterface *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->Changed(); break;
        case 1: { QDBusPendingReply<> _r = _t->SetAccountType((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 2: { QDBusPendingReply<> _r = _t->SetAutomaticLogin((*reinterpret_cast< bool(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 3: { QDBusPendingReply<> _r = _t->SetEmail((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 4: { QDBusPendingReply<> _r = _t->SetHomeDirectory((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 5: { QDBusPendingReply<> _r = _t->SetIconFile((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 6: { QDBusPendingReply<> _r = _t->SetLanguage((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 7: { QDBusPendingReply<> _r = _t->SetLocation((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 8: { QDBusPendingReply<> _r = _t->SetLocked((*reinterpret_cast< bool(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 9: { QDBusPendingReply<> _r = _t->SetPassword((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 10: { QDBusPendingReply<> _r = _t->SetPasswordHint((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 11: { QDBusPendingReply<> _r = _t->SetPasswordMode((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 12: { QDBusPendingReply<> _r = _t->SetRealName((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 13: { QDBusPendingReply<> _r = _t->SetShell((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 14: { QDBusPendingReply<> _r = _t->SetUserName((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 15: { QDBusPendingReply<> _r = _t->SetXSession((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (OrgFreedesktopAccountsUserInterface::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&OrgFreedesktopAccountsUserInterface::Changed)) {
                *result = 0;
                return;
            }
        }
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<OrgFreedesktopAccountsUserInterface *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< int*>(_v) = _t->accountType(); break;
        case 1: *reinterpret_cast< bool*>(_v) = _t->automaticLogin(); break;
        case 2: *reinterpret_cast< QString*>(_v) = _t->email(); break;
        case 3: *reinterpret_cast< QString*>(_v) = _t->homeDirectory(); break;
        case 4: *reinterpret_cast< QString*>(_v) = _t->iconFile(); break;
        case 5: *reinterpret_cast< QString*>(_v) = _t->language(); break;
        case 6: *reinterpret_cast< bool*>(_v) = _t->localAccount(); break;
        case 7: *reinterpret_cast< QString*>(_v) = _t->location(); break;
        case 8: *reinterpret_cast< bool*>(_v) = _t->locked(); break;
        case 9: *reinterpret_cast< qulonglong*>(_v) = _t->loginFrequency(); break;
        case 10: *reinterpret_cast< qlonglong*>(_v) = _t->loginTime(); break;
        case 11: *reinterpret_cast< QString*>(_v) = _t->passwordHint(); break;
        case 12: *reinterpret_cast< int*>(_v) = _t->passwordMode(); break;
        case 13: *reinterpret_cast< QString*>(_v) = _t->realName(); break;
        case 14: *reinterpret_cast< QString*>(_v) = _t->shell(); break;
        case 15: *reinterpret_cast< bool*>(_v) = _t->systemAccount(); break;
        case 16: *reinterpret_cast< qulonglong*>(_v) = _t->uid(); break;
        case 17: *reinterpret_cast< QString*>(_v) = _t->userName(); break;
        case 18: *reinterpret_cast< QString*>(_v) = _t->xSession(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
}

QT_INIT_METAOBJECT const QMetaObject OrgFreedesktopAccountsUserInterface::staticMetaObject = { {
    QMetaObject::SuperData::link<QDBusAbstractInterface::staticMetaObject>(),
    qt_meta_stringdata_OrgFreedesktopAccountsUserInterface.data,
    qt_meta_data_OrgFreedesktopAccountsUserInterface,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *OrgFreedesktopAccountsUserInterface::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *OrgFreedesktopAccountsUserInterface::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_OrgFreedesktopAccountsUserInterface.stringdata0))
        return static_cast<void*>(this);
    return QDBusAbstractInterface::qt_metacast(_clname);
}

int OrgFreedesktopAccountsUserInterface::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDBusAbstractInterface::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 16)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 16)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 16;
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 19;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 19;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 19;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 19;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 19;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 19;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}

// SIGNAL 0
void OrgFreedesktopAccountsUserInterface::Changed()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
